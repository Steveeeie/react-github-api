{"version":3,"sources":["assets/icon-search.svg","assets/logo.svg","components/SearchContext.js","queries.js","components/Tag.js","components/RepositoryListItem.js","components/Loading.js","components/RepositoryList.js","components/SearchButton.js","components/SearchInput.js","components/SearchForm.js","components/HomePage.js","components/RepositoryPage.js","components/GlobalStyles.js","components/App.js","theme.js","serviceWorker.js","index.js"],"names":["module","exports","SearchContext","createContext","SearchContextProvider","children","useState","searchTerm","setSearchTerm","Provider","value","QUERY_REPOSITORIES","gql","QUERY_REPOSITORY","Tag","styled","div","color","theme","colors","white","bevel","small","TagGroup","animationIn","keyframes","Wrapper","Link","index","blue","focus","Title","h1","RepositoryListItem","item","id","nameWithOwner","primaryLanguage","stargazers","watchers","to","key","data-testid","totalCount","name","animation","Loading","defaultProps","RepositoryList","useContext","useQuery","variables","first","loading","error","data","search","nodes","map","SearchButton","button","darker","medium","SearchInput","input","icon","type","Form","form","Logo","img","SearchForm","setValue","onSubmit","event","preventDefault","src","logo","alt","placeholder","onChange","target","disabled","length","HomePage","Updated","p","light","RepositoryPage","match","params","owner","repo","repository","format","parseISO","updatedAt","languages","language","GlobalStyles","createGlobalStyle","dark","App","basename","process","exact","path","component","spacing","factor","Boolean","window","location","hostname","client","ApolloClient","uri","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1bde20e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-search.eb9b8217.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.b0549ef5.svg\";","import React, { createContext, useState } from 'react';\n\nexport const SearchContext = createContext();\n\nexport function SearchContextProvider({ children }) {\n  const [searchTerm, setSearchTerm] = useState('');\n\n  return (\n    <SearchContext.Provider value={{ searchTerm, setSearchTerm }}>\n      {children}\n    </SearchContext.Provider>\n  );\n}\n","import { gql } from 'apollo-boost';\n\nexport const QUERY_REPOSITORIES = gql`\n  query search($searchTerm: String!, $first: Int!, $after: String) {\n    search(query: $searchTerm, type: REPOSITORY, first: $first, after: $after) {\n      repositoryCount\n      nodes {\n        ... on Repository {\n          id\n          nameWithOwner\n          primaryLanguage {\n            id\n            name\n            color\n          }\n          stargazers {\n            totalCount\n          }\n          watchers {\n            totalCount\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_REPOSITORY = gql`\n  query repository($repo: String!, $owner: String!) {\n    repository(name: $repo, owner: $owner) {\n      id\n      nameWithOwner\n      updatedAt\n      languages(first: 5) {\n        nodes {\n          ... on Language {\n            id\n            name\n            color\n          }\n        }\n      }\n      stargazers {\n        totalCount\n      }\n      watchers {\n        totalCount\n      }\n    }\n  }\n`;\n","import styled from 'styled-components';\n\nconst Tag = styled.div`\n  background-color: ${({ color, theme }) => color || theme.colors.white};\n  border-radius: 20px;\n  box-shadow: ${({ theme }) => theme.bevel.small};\n  display: inline-flex;\n  font-size: 14px;\n  padding: 4px 12px;\n`;\n\nexport const TagGroup = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: -4px;\n\n  ${Tag} {\n    margin: 4px;\n  }\n`;\n\nexport default Tag;\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport Tag, { TagGroup } from './Tag';\n\nconst animationIn = keyframes`\n    0% {\n        opacity: 0;\n        transform: scale(0.8) translateZ(0);\n    }\n    100% {\n        opacity: 1;\n        transform: scale(1) translateZ(0);\n    }\n`;\n\nconst Wrapper = styled(Link)`\n  animation: ${animationIn} linear 300ms forwards;\n  animation-delay: ${({ index }) => `${50 * index}ms`};\n  background: #35363a;\n  border-radius: 12px;\n  border: 1px solid transparent;\n  box-shadow: ${({ theme }) => theme.bevel.small};\n  display: flex;\n  flex-wrap: wrap;\n  margin-bottom: 24px;\n  opacity: 0;\n  padding: 24px;\n  text-decoration: none;\n  transform: scale(0.8) translateZ(0);\n  transition: all 150ms linear;\n  width: 100%;\n\n  &:not(:disabled):focus,\n  &:not(:disabled):hover {\n    border-color: ${({ theme }) => theme.colors.blue};\n    box-shadow: ${({ theme }) => theme.focus};\n    outline: none;\n  }\n`;\n\nconst Title = styled.h1`\n  color: ${({ theme }) => theme.colors.white};\n  font-size: 18px;\n  font-weight: 600;\n  margin-bottom: 16px;\n  width: 100%;\n`;\n\nfunction RepositoryListItem({\n  index,\n  item: { id, nameWithOwner, primaryLanguage, stargazers, watchers }\n}) {\n  return (\n    <Wrapper to={nameWithOwner} key={id} index={index} data-testid=\"respository-list-item\">\n      <Title>{nameWithOwner}</Title>\n      <TagGroup>\n        <Tag>Stars: {stargazers.totalCount}</Tag>\n        <Tag>Watchers: {watchers.totalCount}</Tag>\n        {primaryLanguage && <Tag color={primaryLanguage.color}>{primaryLanguage.name}</Tag>}\n      </TagGroup>\n    </Wrapper>\n  );\n}\n\nexport default RepositoryListItem;\n","import styled, { keyframes } from 'styled-components';\n\nconst animation = keyframes`\n    0% {\n      transform: scale(0.3);\n      opacity: 1;\n    }\n    100% {\n      transform: scale(1);\n      opacity: 0;\n    }\n`;\n\nconst Loading = styled.div`\n  height: 72px;\n  position: relative;\n  width: 72px;\n\n  &::before,\n  &::after {\n    animation: ${animation} 1s cubic-bezier(0, 0.2, 0.8, 1) infinite forwards;\n    border-radius: 50%;\n    border: 4px solid #fff;\n    content: '';\n    height: 100%;\n    opacity: 1;\n    position: absolute;\n    width: 100%;\n  }\n\n  &::after {\n    animation-delay: -0.5s;\n  }\n`;\n\nLoading.defaultProps = {\n  'data-testid': 'loading'\n};\n\nexport default Loading;\n","import React, { useContext } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_REPOSITORIES } from '../queries';\nimport { SearchContext } from './SearchContext';\nimport RepositoryListItem from './RepositoryListItem';\nimport Loading from './Loading';\n\nfunction RepositoryList() {\n  const { searchTerm } = useContext(SearchContext);\n\n  const { loading, error, data } = useQuery(QUERY_REPOSITORIES, {\n    variables: { searchTerm, first: 20 }\n  });\n\n  if (searchTerm) {\n    if (loading) return <Loading />;\n\n    if (error) return <p>He's Dead Jim&hellip;</p>;\n\n    return data.search.nodes.map((item, index) => (\n      <RepositoryListItem key={item.id} item={item} index={index} />\n    ));\n  } else {\n    return null;\n  }\n}\n\nexport default RepositoryList;\n","import styled from 'styled-components';\n\nconst SearchButton = styled.button`\n  background-color: ${({ theme }) => theme.colors.darker};\n  border-radius: 22px;\n  border: 1px solid transparent;\n  box-shadow: ${({ theme }) => theme.bevel.medium};\n  color: ${({ theme }) => theme.colors.white};\n  cursor: pointer;\n  flex: none;\n  font-weight: 500;\n  height: 44px;\n  margin: 12px;\n  padding: 0 24px;\n  transition: all 150ms linear;\n\n  &:disabled {\n    background: #35363a;\n    color: rgba(255, 255, 255, 0.2);\n    cursor: not-allowed;\n  }\n\n  &:not(:disabled):focus,\n  &:not(:disabled):hover {\n    border-color: ${({ theme }) => theme.colors.blue};\n    box-shadow: ${({ theme }) => theme.focus};\n    outline: none;\n  }\n`;\n\nexport default SearchButton;\n","import styled from 'styled-components';\nimport icon from '../assets/icon-search.svg';\n\nconst SearchInput = styled.input`\n  background-color: ${({ theme }) => theme.colors.white};\n  background-image: url(${icon});\n  background-position: 16px center;\n  background-repeat: no-repeat;\n  border: 1px solid transparent;\n  border-radius: 22px;\n  box-shadow: ${({ theme }) => theme.bevel.medium};\n  flex: 1 1 auto;\n  height: 44px;\n  margin: 12px;\n  padding: 0 16px 0 48px;\n  transition: all 150ms linear;\n  width: 100%;\n\n  &:not(:disabled):focus,\n  &:not(:disabled):active {\n    border-color: ${({ theme }) => theme.colors.blue};\n    box-shadow: ${({ theme }) => theme.focus};\n    outline: none;\n  }\n\n  @media (min-width: 900px) {\n    width: auto;\n  }\n`;\n\nSearchInput.defaultProps = {\n  type: 'search'\n};\n\nexport default SearchInput;\n","import React, { useContext, useState } from 'react';\nimport styled from 'styled-components';\nimport { SearchContext } from './SearchContext';\nimport SearchButton from './SearchButton';\nimport SearchInput from './SearchInput';\nimport logo from '../assets/logo.svg';\n\nconst Form = styled.form`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin: -12px;\n  padding-bottom: 32px;\n  width: 100%;\n\n  @media (min-width: 900px) {\n    flex-direction: row;\n    padding-bottom: 64px;\n  }\n`;\n\nconst Logo = styled.img`\n  height: 24px;\n  margin: 12px;\n\n  @media (min-width: 900px) {\n    height: 32px;\n  }\n`;\n\nfunction SearchForm() {\n  const { searchTerm, setSearchTerm } = useContext(SearchContext);\n  const [value, setValue] = useState(searchTerm);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setSearchTerm(`${value} sort:stars`);\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Logo src={logo} alt=\"Github\" />\n      <SearchInput\n        placeholder=\"Search&hellip;\"\n        value={value}\n        onChange={event => setValue(event.target.value)}\n      />\n      <SearchButton disabled={!value.length}>Search</SearchButton>\n    </Form>\n  );\n}\n\nexport default SearchForm;\n","import React from 'react';\nimport { SearchContextProvider } from './SearchContext';\nimport RepositoryList from './RepositoryList';\nimport SearchForm from './SearchForm';\n\nfunction HomePage() {\n  return (\n    <SearchContextProvider>\n      <SearchForm />\n      <RepositoryList />\n    </SearchContextProvider>\n  );\n}\n\nexport default HomePage;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useQuery } from '@apollo/react-hooks';\nimport { parseISO, format } from 'date-fns';\nimport { QUERY_REPOSITORY } from '../queries';\nimport Loading from './Loading';\nimport Tag, { TagGroup } from './Tag';\n\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nconst Title = styled.h1`\n  color: ${({ theme }) => theme.colors.white};\n  font-size: 1.2rem;\n  margin-bottom: 16px;\n\n  @media (min-width: 480px) {\n    font-size: 1.6rem;\n  }\n`;\n\nconst Updated = styled.p`\n  color: ${({ theme }) => theme.colors.light};\n  margin-bottom: 24px;\n`;\n\nfunction RepositoryPage({\n  match: {\n    params: { owner, repo }\n  }\n}) {\n  const { loading, error, data } = useQuery(QUERY_REPOSITORY, {\n    variables: { owner, repo }\n  });\n\n  if (loading) return <Loading />;\n\n  if (error) return <Title>Repository Not Found</Title>;\n\n  return (\n    <Wrapper>\n      <Title>{data.repository.nameWithOwner}</Title>\n      <Updated>Updated on {format(parseISO(data.repository.updatedAt), 'dd MMMM yyyy')}</Updated>\n      <TagGroup>\n        <Tag>Stars: {data.repository.stargazers.totalCount}</Tag>\n        <Tag>Watchers: {data.repository.watchers.totalCount}</Tag>\n        {data.repository.languages.nodes.map(language => (\n          <Tag key={language.id} color={language.color}>\n            {language.name}\n          </Tag>\n        ))}\n      </TagGroup>\n    </Wrapper>\n  );\n}\n\nexport default RepositoryPage;\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n    *{\n        border: 0;\n        box-sizing: border-box;\n        color: inherit;\n        font: inherit;\n        margin: 0;\n        padding: 0;\n        -moz-osx-font-smoothing: grayscale;\n        -webkit-font-smoothing: antialiased;\n    }\n\n    html{\n        font-size: 16px;\n    }\n\n    body{\n        background-color: ${({ theme }) => theme.colors.dark};\n        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n    }\n`;\n\nexport default GlobalStyles;\n","import React from 'react';\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\nimport styled from 'styled-components';\nimport HomePage from './HomePage';\nimport RepositoryPage from './RepositoryPage';\nimport GlobalStyles from './GlobalStyles';\n\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  max-width: 100%;\n  padding: 24px;\n  width: 720px;\n\n  @media (min-width: 480px) {\n    padding: 48px;\n  }\n`;\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <GlobalStyles />\n      <Wrapper>\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/:owner/:repo\" component={RepositoryPage} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </Wrapper>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const theme = {\n  colors: {\n    blue: '#2196f3',\n    white: '#ffffff',\n    light: '#ccc',\n    dark: '#35363a',\n    darker: '#202124'\n  },\n  focus: 'inset 0 1px 2px rgba(27, 31, 35, 0.075), 0 0 0 4px rgba(3, 102, 214, 0.3)',\n  bevel: {\n    small: '2px 2px 4px #2d2e31, -2px -2px 4px #3d3e43',\n    medium: '4px 4px 8px #2d2e31, -4px -4px 8px #3d3e43'\n  },\n  spacing: factor => [0, 4, 8, 12, 16, 24, 32, 64][factor] + 'px'\n};\n\nexport default theme;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ThemeProvider } from 'styled-components';\nimport App from './components/App';\nimport theme from './theme';\nimport * as serviceWorker from './serviceWorker';\n\nconst client = new ApolloClient({ uri: process.env.REACT_APP_PROXY_URL });\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}